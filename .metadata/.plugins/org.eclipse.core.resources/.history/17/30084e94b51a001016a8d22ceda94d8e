#include "xparameters.h"
#include "platform.h"
#include <sleep.h>
#include <iostream>
#include "sum_register.h"
#include "xgpiops.h"

#define PIN_OFFSET 78


int main()
{
	//EMIO initialization
	XGpioPs Gpio;
	XGpioPs_Config *ConfigPtr;
	ConfigPtr = XGpioPs_LookupConfig(XPAR_XGPIOPS_0_DEVICE_ID);
	int Status = XGpioPs_CfgInitialize(&Gpio, ConfigPtr, ConfigPtr->BaseAddr);
	if (Status != XST_SUCCESS) {
		std::cout << "Failed to initialize GPIO!" << std::endl;
		return XST_FAILURE;
	}
	XGpioPs_SetDirectionPin(&Gpio, PIN_OFFSET, 1);
	XGpioPs_SetOutputEnablePin(&Gpio, PIN_OFFSET, 1);
	XGpioPs_WritePin(&Gpio, PIN_OFFSET, 0);

    init_platform();
    sleep(2);



    // Waiting
    while(1){
    	std::cout << "Podaj numer startowy: ";
    	int number;
		std::cin >> number;
		SUM_REGISTER_mWriteReg(XPAR_SUM_REGISTER_0_S00_AXI_BASEADDR, SUM_REGISTER_S00_AXI_SLV_REG0_OFFSET, number);
		XGpioPs_WritePin(&Gpio, PIN_OFFSET, 1);
		for (int i = 0; i < 2048; ++i)
		{
			u32 value = Xil_In32(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR + i * 4);
			std::cout << "Odczytano: " << value << "\n\r";
			// Waiting
			//std::cin >> number;
		}
		XGpioPs_WritePin(&Gpio, PIN_OFFSET, 0);

		sleep(5);
    }

    // Data transmission AXI-Lite
//    while(1){
//		// std::cout << "Hello World C++\n\r";
//		int a; int b;
//		std::cin >> a;
//		std::cin >> b;
//		SUM_REGISTER_mWriteReg(XPAR_SUM_REGISTER_0_S00_AXI_BASEADDR, SUM_REGISTER_S00_AXI_SLV_REG0_OFFSET, a);
//		SUM_REGISTER_mWriteReg(XPAR_SUM_REGISTER_0_S00_AXI_BASEADDR, SUM_REGISTER_S00_AXI_SLV_REG1_OFFSET, b);
//		std::cout << a << " + " << b << " = ";
//		int sum;
//		sum = SUM_REGISTER_mReadReg(XPAR_SUM_REGISTER_0_S00_AXI_BASEADDR, SUM_REGISTER_S00_AXI_SLV_REG2_OFFSET);
//		std::cout << sum << '\n';
//		sleep(1);  // s
//    };
//    std::cout << "Successfully ran Hello World application";
    cleanup_platform();
    return 0;
}
